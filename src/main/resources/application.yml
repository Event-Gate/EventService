server:
  port: 8083

spring:
  application:
    name: event-service
  data:
    mongodb:
      uri: mongodb://localhost:27017/event_db
      auto-index-creation: true
  cloud:
    consul:
      discovery:
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        instance-id: ${spring.application.name}:${random.value}
        service-name: event-service
      host: localhost
      port: 8500
    openfeign:
      client:
        config:
          default:
            loggerLevel: FULL
  kafka:
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      bootstrap-servers: localhost:9092
      group-id: event-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.type.mapping: org.pfa.ticket.dtos.EventCapacityRequest:com.pfa.eventservice.dtos.EventCapacityRequest
    topic:
      event-name: events-topic
      capacity-name: capacities-topic

jwt:
  secret: ${JWT_SECRET}

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    com.pfa.eventservice: DEBUG
    org.springframework.security.oauth2: TRACE